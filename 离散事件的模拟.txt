#include<stdio.h>
#include<stdlib.h>
#include<time.h> 
typedef int Status;
#define STACK_INIT_SIZE  100
#define STACKINCREMENT  10
//队列数据结构
typedef struct {
	int ArrivalTime;
	int Duration;
}QElemType;
typedef struct QNode {
	QElemType data;
	struct QNode *next;
}QNode, *QueuePtr;
typedef struct {
	QueuePtr front; //队头指针
	QueuePtr rear;  //队尾指针
}LinkQueue;
//事件表数据结构
typedef struct {
	int OccurTime;  //当前事件发生时间
	int NType;
}Event, ElemType; //元素类型
typedef struct LNode {
	ElemType data;
	struct LNode *next;
}LNode, *LinkList;    //线性链表结点
typedef LinkList EventList;
#define CloseTime 450
EventList ev; //事件表
Event     en; //事件
LinkQueue  q[5]; //4个客户队列
QElemType customer; //客户记录
int TotalTime, CustomerNum; //累积客户逗留时间，客户数
int cmp(int a, int b)
{
	if (a > b)
		return 1;
	else if (a < b)
		return -1;
	else
		return 0;
}
//按OccurTime由小到大的顺序排列 相同的则先进来的排前面  
Status OrderInsert(LinkList &L, ElemType e, int(*compare)(int, int))
{
	ElemType tmp;
	LinkList s;
	LinkList p = L;
	if (p->next == NULL)  //没有元素则直接插入
	{
		s = (LinkList)malloc(sizeof(LNode));
		s->next = NULL;
		s->data = e;
		p->next = s;
	}
	else
	{
		while (compare(e.OccurTime, p->next->data.OccurTime) != -1)
		{
			p = p->next;
			if (p->next == NULL)
			{
				s = (LinkList)malloc(sizeof(LNode));
				s->data = e; s->next = p->next;
				p->next = s;
				return 1;
			}
		}
		s = (LinkList)malloc(sizeof(LNode));
		s->data = e; s->next = p->next;
		p->next = s;
	}
	return 1;
}

//创建一个新的空链表
Status ListCreate_L(LinkList &L)
{
	if (L == NULL)
	{
		L = (LinkList)malloc(sizeof(LNode));
		L->next = NULL;
		return 1;
	}
	else
		return 0;
}
//销毁一个链表
Status ListDestroy_L(LinkList &L)
{
	LinkList p = L, s;
	while (p->next != NULL)
	{
		s = p; p = p->next;  free(s);
	}
	return 1;
}
//判断一个链表是否为空
int ListEmpty_L(LinkList L)
{
	if (L->next == NULL)
		return 1;
	else
		return 0;
}
//删除链表的第一个元素
Status ListDeleteFirst_L(LinkList &L, ElemType &e)
{
	LinkList s;
	LinkList p = L;
	s = p;
	p = p->next;
	e = p->data;
	s->next = p->next;
	free(p);
	return 1;
}
//链队列
Status InitQueue_L(LinkQueue &Q)
{
	//构造一个空队列Q
	Q.front = Q.rear = (QueuePtr)malloc(sizeof(QNode));
	if (Q.front == NULL) exit(0);
	Q.front->next = NULL;
	return 1;
}
Status DestroyQueue_L(LinkQueue &Q)
{
	//销毁一个队列
	while (Q.front != NULL)
	{
		Q.rear = Q.front->next;  //节省定义
		free(Q.front);
		Q.front = Q.rear;
	}
	return 1;
}
Status EnQueue_L(LinkQueue &Q, QElemType e) {
	//插入元素e为Q的新的队尾元素
	QueuePtr p = (QueuePtr)malloc(sizeof(QNode));
	if (!p) exit(0);
	p->data = e;  p->next = NULL;
	Q.rear->next = p;
	Q.rear = p;
	return 1;
}

Status DeQueue_L(LinkQueue &Q, QElemType &e)
{
	//若队列不空 删除Q的队头元素，用e返回其值，并返回OK
	//否则返回ERROR
	QueuePtr p;
	if (Q.rear == Q.front) return 0;
	p = Q.front->next;
	e = p->data;
	Q.front->next = p->next;
	if (Q.rear == p) Q.rear = Q.front;
	free(p);
	return 1;
}

int QueueLength_L(LinkQueue Q)
{
	//返回Q的元素个数，即队列的长度
	if (Q.front == Q.rear)
	{
		return 0;
	}
	QueuePtr p = Q.front;
	int i = 1;
	while (p->next != Q.rear)
	{
		i++;
		p = p->next;
	}
	return i;
}
int QueueEmpty_L(LinkQueue Q)
{
	if (Q.rear == Q.front)
		return 1;
	else
		return 0;
}
Status GetHeadQueue_L(LinkQueue Q, QElemType &e)
{
	e = Q.front->next->data;
	return 1;
}
int Minimum(LinkQueue q[])
{
	int l[5];
	for (int i = 1; i <= 4; i++)
	{
		l[i] = q[i].rear - q[i].front;
	}
	int a = l[1] > l[2] ? 2 : 1;
	int b = l[3] > l[4] ? 4 : 3;
	return l[a] > l[b] ? b : a;
}

void OpenForDay()
{
	//初始化操作
	TotalTime = 0; CustomerNum = 0; //初始化累积时间和客户数
	ListCreate_L(ev);               //初始化事件链表为空表
	en.OccurTime = 0; en.NType = 0; //设定第一个客户到达事件
	OrderInsert(ev, en, cmp);         //插入事件表
	for (int i = 1; i <= 4; i++) InitQueue_L(q[i]); //置空队列
}//OpenForDay

void CustomerArrived()
{
	//处理客户到达事件  en.NType = 0;
	int durtime, intertime;
	ElemType tmp;
	QElemType Qtmp;
	++CustomerNum;
	durtime = 1 + (int)(30.0*rand() / (RAND_MAX + 1.0)); //处理时间,随机生成0到29的数字
	intertime = 1 + (int)(10.0*rand() / (RAND_MAX + 1.0)); //下一客户到达时间间隔
	printf("durtime:%d\ intertime:%d\n",durtime,intertime);
	int t = en.OccurTime + intertime;  //下一客户到达时间
	if (t < CloseTime) //银行未关门 插入事件表
	{
		tmp.OccurTime = t;
		tmp.NType = 0;
		OrderInsert(ev, tmp, cmp);
	}
	int i = Minimum(q);
	Qtmp.ArrivalTime = en.OccurTime;
	Qtmp.Duration = durtime;
	EnQueue_L(q[i], Qtmp); //将当前到来的客户插入队列
	if (QueueLength_L(q[i]) == 1)
	{
		tmp.OccurTime = en.OccurTime + durtime;
		tmp.NType = i;
		OrderInsert(ev, tmp, cmp); //若队列长度为1 则插入一个离开事件
	}
}
void CustomerDeparture()
{
	//处理客户离开事件 ，en.Type>0;
	ElemType tmp;
	int i = en.NType;  DeQueue_L(q[i], customer); //删除第i队列的排头客户
	printf("time:%d\n", en.OccurTime - customer.ArrivalTime);
	TotalTime += en.OccurTime - customer.ArrivalTime;
	if (!QueueEmpty_L(q[i]))
	{
		GetHeadQueue_L(q[i], customer);
		tmp.NType = i;
		tmp.OccurTime = en.OccurTime + customer.Duration;
		OrderInsert(ev, (tmp), cmp);
	}
}

void Bank_Simulation()
{
	ElemType tmp;
	OpenForDay();
	while (!ListEmpty_L(ev)) //事件表非空继续执行
	{
		ListDeleteFirst_L(ev, tmp);
		en = tmp;
		if (en.NType == 0)
			CustomerArrived();
		else
			CustomerDeparture();
	}

	printf("The Average Time is %f\n", (float)TotalTime / CustomerNum);
}
int main()
{
	srand((int)time(0));
	Bank_Simulation();
	system("pause");
	return 0;
}